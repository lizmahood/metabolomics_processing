blkgrp <- blankgroups
ph <- peakheight
if (length(tcols) != 0){
asycols <- c(ccols, tcols)
}else asycols <- ccols
#print(colnames(pl)[asycols])
print(paste0('Total metabolites: ', nrow(prepl)))
print(paste0('Total fragmented metabolites: ', length(which(prepl$MS.MS.spectrum != ''))))
##which rows have fragmented metabolites
frags <- which(prepl$MS.MS.spectrum != '')
### CHECKS for %0 values and S/N values
checkmissing(prepl[,asycols], misscut)
checksn(asycols, snmatt, snsampt)
### 1) doing sn thresholding
prepl[,sncol] <- as.numeric(prepl[,sncol])
plr <- nrow(prepl)
##assuming internal std has survived SN threshold
pl <- prepl[which(prepl[,sncol] > snthresh),]
snfrags <- which(pl$MS.MS.spectrum != '')
##checking if IDs of interest were removed
if (length(introws) > 0){
for (i in 1:length(introws)){
if (introws[i] %in% as.numeric(pl[,idcol])){
print(paste0(introws[i], ' survived SN thresh!'))
print(paste0('SN Threshod: ', snthresh))
print(paste0('This metabolites SN: ', pl[which(pl[,idcol] == introws[i]), sncol]))
}else{
print(paste0(introws[i], ' was removed because of low SN'))
print(paste0('SN Threshod: ', snthresh))
print(paste0('This metabolites SN: ', prepl[which(prepl[,idcol] == introws[i]), sncol]))
}
}
}
##getting internal standard row
print(length(which(pl[,idcol] == telid)))
telrow <- which(pl[,idcol] == telid)
if (length(telrow) > 1) telrow <- telrow[1]
##getting sample values
asy <- pl[,c(asycols, blkcol)]
align <- pl[,1]
#asy <- pl[,asycols]
asy <- apply(asy, 2, as.numeric)
#print('Correlation of raw values after s/n threshold')
#print(cor(asy))
asyr <-  nrow(asy)
print(paste0('Num of metabolites removed from SN: ', (plr - asyr)))
print(paste0("Num of fragmented metabolies removed: ", (length(frags) - length(snfrags))))
badrow <- c()
### 2 Apply noise threshold: any metab with max height lower than 10k removed
### Should only do for non-qc normalized data
phasy <- ph[,c(asycols, blkcol)]
lowrow <- which(rowMaxs(as.matrix(phasy)) < 10000)
badrow <- lowrow
##seeing if metabs of interest are removed.
if (length(introws) > 0){
for (i in 1:length(introws)){
if (introws[i] %in% pl[lowrow,idcol]){
print(paste0(introws[i], ' was removed because of low values'))
}
}
}
##writing out correlation before blank
cort <- cor(asy[-lowrow,])
print(paste0('Num of metabolites removed from low values: ', length(lowrow)))
print(paste0('Num of fragmented metabolites removed: ', (length(which(snfrags %in% badrow)))))
### 3) Blank filter: if average metabolite value in blank is >= 50% of
### min value in sample -- remove
if (length(blkcol) == 1){
inblank <- make_blank_single(asy)
}else if (length(blkcol) > 1){
inblank <- make_blank_mult(pl, blkcol, blkgrp)
}
##seeing if metabs of interest are removed.
if (length(introws) > 0){
for (i in 1:length(introws)){
if (introws[i] %in% pl[inblank,idcol]){
print(paste0(introws[i], ' was in the blank'))
}
}
}
print(paste0('Num of metabolites in blank: ', length(inblank)))
print(paste0('Num of fragmented metabolites removed: ', length(which(snfrags %in% inblank))))
#print(inblank[which(inblank == telrow)])
if (telrow %in% inblank) inblank <- inblank[-which(inblank == telrow)] ##need to keep internal stndard
badrow <- c(badrow, inblank)
badrow <- unique(badrow)
#print('Correlation after blank filter')
print(paste0('Num of metabolites removed from blank or low row: ', length(badrow)))
print(colnames(asy))
### 4) Normalizing to sample weight
for (i in 1:length(sweights)){
asy[,i] <- asy[,i]/sweights[i]
}
### 5) Normalizing to internal standard, if wanted
if (isnm == 'yes'){
intvals <- asy[telrow,]
for (i in 1:length(intvals)){
asy[,i] <- asy[,i]/intvals[i]
}
}
print('Done with intstd norm')
##now need to add telrow to rows getting removed
badrow <- c(badrow, telrow)
badrow <- sort(badrow)
if (length(blkcol) == 1){
asy2 <- asy[-badrow, -ncol(asy)]
} else {
asy2 <- asy[-badrow, 1:(ncol(asy)-length(blkcol))]
}
dim(as7)
dim(asy)
length(badrow)
5761-5636
length(unique(badrow))
### 7) imputing missing values, ignoring blank
if (imp == 'yes'){
mdat <- pl[-badrow,]
gps <- get_groups(asy2)
knnlis <- imp_per_group(asy2, gps, mdat)
mdat2 <- knnlis[[1]]
knnasy <- knnlis[[2]]
print(paste0('Num of metabolites removed from knn, noise or blank: ', length(badrow)))
print(length(badrow))
#badrow <- c(badrow, missrow)
badrow <- unique(badrow)
#print('Correlation after knn imputation')
#print(cor(knnasy))
}else{
knnasy <- asy2
gps <- get_groups(knnasy)
#knnasy <- asy[-badrow,]
mdat2 <- pl[-badrow,]
}
rownames(mdat2)
rownames(mdat2) %in% badrow
badrow[1:30]
immp
imp
imp <- no
imp <- 'no'
### 7) imputing missing values, ignoring blank
if (imp == 'yes'){
mdat <- pl[-badrow,]
gps <- get_groups(asy2)
knnlis <- imp_per_group(asy2, gps, mdat)
mdat2 <- knnlis[[1]]
knnasy <- knnlis[[2]]
print(paste0('Num of metabolites removed from knn, noise or blank: ', length(badrow)))
print(length(badrow))
#badrow <- c(badrow, missrow)
badrow <- unique(badrow)
#print('Correlation after knn imputation')
#print(cor(knnasy))
}else{
knnasy <- asy2
gps <- get_groups(knnasy)
#knnasy <- asy[-badrow,]
mdat2 <- pl[-badrow,]
}
head(badrow)
asy[head(badrow)]
asy[head(badrow),]
dim(asy)
dim(asy[badrow,])
asy[badrow,]
tail(badrow)
argg
argg <- c('../cuheat/second_cuheat_metabolomics/original_files/POS/MSDIAL_out/PeakArea_deadvol_removed.tab', 1, '46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71', '38,39,40,41,42,43,44,45', 72, '62,64.1,60,64.9,51.4,46.3,50.6,42.6,61.6,63,66,67.6,63.6,61.4,66.7,65.3,47.9,45.3,49.6,49,50.2,48.8,48.1,50,59.1,47,61.1,60.6,34.9,33.9,29.4,41.2', 29, 10, '../cuheat/second_cuheat_metabolomics/original_files/POS/MSDIAL_out/PeakHeight_deadvol_removed.tab', 'no', 'yes', 5326, 'yes', 'no', '../cuheat/second_cuheat_metabolomics/original_files/POS/MSDIAL_out/SN_deadvol_removed.tab', 10, 72, 'none', 'none', 0.3)
get_groups <- function(df){
ct <- colnames(df)
groups <- unlist(lapply(strsplit(ct, '_'), '[', 1))
return(groups)
}
checkmissing <- function(asycl, cutoff){
##Should not include blank
bad <- c()
for (i in 1:ncol(asycl)){
cl <- asycl[,i]
cl[cl == 0] <- NA
print (paste0(colnames(asycl)[i], ' ', (length(which(is.na(cl))) / length(cl))))
if ((length(which(is.na(cl))) / length(cl)) >= cutoff) bad <- c(bad, i)
}
if (length(bad) > 0){
stop(paste0('ERROR! Samples ', paste0(colnames(asycl)[bad], collapse = ', '),
' had more missing values than you allow!!'))
}
}
checksn <- function(asycl, snm, snthrsam){
##Should not include blank
snasy <- as.matrix(snm[,asycl])
bad <- c()
for (samp in 1:ncol(snasy)){
print(paste0(colnames(snm)[asycl[samp]], ' ', mean(snasy[,samp])))
if (mean(snasy[,samp]) < snthrsam) bad <- c(bad, samp)
}
if (length(bad) > 0){
stop(paste0('ERROR! Samples ', paste0(colnames(snasy)[bad], collapse = ', '),
' had lower S/N than you allow!!'))
}
}
make_blank_single <- function(asy){
inblank <- c()
bcol <- ncol(asy)
for (i in 1:nrow(asy)){
if (asy[i, bcol] > 50000 & (asy[i, bcol] / min(as.numeric(unname(asy[i,(1:bcol-1)])))) > 0.5){
inblank <- c(inblank, i)
}
}
return(inblank)
}
make_blank_mult <- function(pkl, blkc, blkg){
##pkl is whole alignment table, not just asy
##blkc is numeric vector of blank column indices
##blkg is a string -- which blanks go with which columns
##parsing the blkg string into a list
blkgroups <- unlist(strsplit(blkg, '[', fixed = T))
blkgroups <- blkgroups[blkgroups != '']
inblank <- c()
for (grp in blkgroups){
##parsing the string
grp <- gsub(']', '', grp, fixed = T)
grplst <- strsplit(grp, '-', fixed = T)[[1]]
blkcol <- as.numeric(grplst[1])
asycols <- as.numeric(unlist(strsplit(grplst[2], ',')))
for (i in 1:nrow(pkl)){
if (pkl[i, blkcol] > 50000 & (pkl[i, blkcol] / min(as.numeric(unname(pkl[i, asycols])))) > 0.5){
inblank <- c(inblank, i)
}
}
}
return(unique(inblank))
}
imp_per_group <- function(df, groups, mdat){
##Output dataframe will have sample columns
##at the end of the dataframe. Blank should
##NOT be included at this step
tdf <- as.data.frame(t(df))
tdf$groups <- groups
##of non-zero/non-noise rows per group
gil <- list()
##list of imputed values
implist <- list()
##imputing for each group separately
for (grp in unique(tdf$groups)){
timp <- tdf[which(tdf$groups == grp),]
imp <- t(timp)
imp <- as.matrix(imp[-nrow(imp),])
imp <- apply(imp, 2, as.numeric)
imp[imp == 0] <- NA
noise <- which(rowSums(is.na(imp)) >= (0.5 * ncol(imp)))
good <- which(rowSums(is.na(imp)) < (0.5 * ncol(imp)))
goodimp <- imp[-noise,]
if (length(good) == 1){
knnimp <- impute::impute.knn(t(as.matrix(goodimp)), k = 3, colmax = 1)$data
} else knnimp <- t(impute::impute.knn(t(as.matrix(goodimp)), k = 3, colmax = 1)$data)
gil[[grp]] <- good
#names(gil)[length(names(gil))] <- grp
implist[[grp]] <- round(knnimp)
}
##making copy of df to remove rows from
outdf <- df
noiserws <- c()
##removing rows if they are zero/noise across ALL conditions
for (rw in 1:nrow(df)){
inn <- F
conds <- c()
for (vec in 1:length(gil)){
if (rw %in% gil[[vec]]) {
inn <- T
conds <- c(conds, vec)
}
}
if (inn == F) {
noiserws <- c(noiserws, rw)
#outdf <- outdf[-rw,]
#mdat <- mdat[-rw,]
}else {
##if they are not zero/noise across ALL conditions,
##combine the zero/noise conditions with imputed conditions
##for each group it was good in
goodcols <- c()
goodvals <- c()
for (cnd in conds){
##get the columns of that group
cls <- which(tdf$group == names(gil)[cnd])
goodcols <- c(goodcols, cls)
##get the imputed values for those groups
impvals <- unname(implist[[cnd]][unname(which(gil[[cnd]] == rw)),])
goodvals <- c(goodvals, impvals)
}
##replace original values with these values
for(cl in 1:length(goodcols)){
outdf[rw, goodcols[cl]] <- goodvals[cl]
}
## all other columns (noise ones) will be filled with 0
zerovec <- c(seq(1, ncol(df)))
zerovec <- zerovec[-goodcols]
outdf[rw, zerovec] <- 0
}
}
if (length(noiserws) != 0){
outdf <- outdf[-noiserws,]
mdat <- mdat[-noiserws,]
}
return(list(mdat, outdf))
}
args <- argg
argg <- c('../cuheat/second_cuheat_metabolomics/original_files/POS/MSDIAL_out/PeakArea_deadvol_removed.tab', 1, '46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71', '38,39,40,41,42,43,44,45', 72, '62,64.1,60,64.9,51.4,46.3,50.6,42.6,61.6,63,66,67.6,63.6,61.4,66.7,65.3,47.9,45.3,49.6,49,50.2,48.8,48.1,50,59.1,47,61.1,60.6,34.9,33.9,29.4,41.2', 29, 10, '../cuheat/second_cuheat_metabolomics/original_files/POS/MSDIAL_out/PeakHeight_deadvol_removed.tab', 'no', 'yes', 5326, 'yes', 'no', '../cuheat/second_cuheat_metabolomics/original_files/POS/MSDIAL_out/SN_deadvol_removed.tab', 10, 72, 'none', 'none', 0.3)
args <- argg
peakarea <- read.table(args[1], sep = '\t', header = T, stringsAsFactors = F, quote = "", fill = NA)
idcol <- as.numeric(args[2])
if (grepl(',', args[3], fixed = T)){
treatcol <- as.numeric(unlist(strsplit(args[3], ',')))
}else treatcol <- 0
ctrlcol <- as.numeric(unlist(strsplit(args[4], ',')))
##are there multiple blanks?
if (grepl(',', args[5], fixed = T)) {
blnkcol <- as.numeric(unlist(strsplit(args[5], ',', fixed = T)))
} else blnkcol <- as.numeric(args[5])
swt <- as.numeric(unlist(strsplit(args[6], ',')))
snc <- as.numeric(args[7])
sncut <- as.numeric(args[8])
peakheight <- read.table(args[9], sep = '\t', header = T, stringsAsFactors = F, quote = "", fill = NA)
logt <- as.character(args[10])
immp <- as.character(args[11])
tlid <- as.numeric(args[12])
varsn <- as.character(args[13])
isd <- as.character(args[14])
snmat <- read.table(args[15], sep = '\t', header = T, stringsAsFactors = F, quote = "", fill = NA)
snt <- as.numeric(args[16])
blankgroups <- args[17]
if (args[18] == 'none'){
qccols <- ''
}else qccols <- as.numeric(unlist(strsplit(args[18], ',')))
if (args[19] == 'none'){
introws <- c()
}else introws <- as.numeric(unlist(strsplit(args[19], ',')))
misscut <- as.numeric(args[20])
immp
immp <- 'no'
prepl <- peakarea
ccols <- ctrlcol
tcols <- treatcol
blkcol <- blnkcol
sweights <- swt
sncol <- snc
snthresh <- sncut
lt <- logt
imp <- immp
telid <- tlid
vsnn <- varsn
isnm <- isd
snmatt <- snmat
snsampt <- snt
blkgrp <- blankgroups
ph <- peakheight
if (length(tcols) != 0){
asycols <- c(ccols, tcols)
}else asycols <- ccols
#print(colnames(pl)[asycols])
print(paste0('Total metabolites: ', nrow(prepl)))
print(paste0('Total fragmented metabolites: ', length(which(prepl$MS.MS.spectrum != ''))))
##which rows have fragmented metabolites
frags <- which(prepl$MS.MS.spectrum != '')
### CHECKS for %0 values and S/N values
checkmissing(prepl[,asycols], misscut)
checksn(asycols, snmatt, snsampt)
### 1) doing sn thresholding
prepl[,sncol] <- as.numeric(prepl[,sncol])
plr <- nrow(prepl)
##assuming internal std has survived SN threshold
pl <- prepl
snrow <- which(pl[,sncol] <= snthresh)
snfrags <- which(pl$MS.MS.spectrum != '')
##checking if IDs of interest were removed
if (length(introws) > 0){
badids <- pl[snrow, idcol]
for (i in 1:length(introws)){
if (!(introws[i] %in% badids)){
print(paste0(introws[i], ' survived SN thresh!'))
print(paste0('SN Threshod: ', snthresh))
print(paste0('This metabolites SN: ', pl[which(pl[,idcol] == introws[i]), sncol]))
}else{
print(paste0(introws[i], ' was removed because of low SN'))
print(paste0('SN Threshod: ', snthresh))
print(paste0('This metabolites SN: ', prepl[which(prepl[,idcol] == introws[i]), sncol]))
}
}
}
##getting internal standard row
print(length(which(pl[,idcol] == telid)))
telrow <- which(pl[,idcol] == telid)
if (length(telrow) > 1) telrow <- telrow[1]
##getting sample values
asy <- pl[,c(asycols, blkcol)]
align <- pl[,1]
#asy <- pl[,asycols]
asy <- apply(asy, 2, as.numeric)
#print('Correlation of raw values after s/n threshold')
#print(cor(asy))
asyr <-  nrow(asy)
print(paste0('Num of metabolites removed from SN: ', (plr - asyr)))
print(paste0("Num of fragmented metabolies removed: ", (length(frags) - length(snfrags))))
snfrags <- which(pl[snrow, pl$MS.MS.spectrum != ''])
snfrags <- pl[snrow,]$MS.MS.spectrum != ''
length(snfrags)
snfrags <- which(pl[snrow,]$MS.MS.spectrum != '')
length(snfrags)
print(paste0('Num of metabolites removed from SN: ', (length(snrow))))
print(paste0("Num of fragmented metabolies removed: ", (length(frags) - length(snfrags))))
print(paste0('Num of metabolites removed from SN: ', length(snrow)))
print(paste0("Num of fragmented metabolies removed: ", length(snfrags)))
### 2 Apply noise threshold: any metab with max height lower than 10k removed
### Should only do for non-qc normalized data
phasy <- ph[,c(asycols, blkcol)]
lowrow <- which(rowMaxs(as.matrix(phasy)) < 10000)
badrow <- unique(c(snrow, lowrow))
##seeing if metabs of interest are removed.
if (length(introws) > 0){
for (i in 1:length(introws)){
if (introws[i] %in% pl[lowrow,idcol]){
print(paste0(introws[i], ' was removed because of low values'))
}
}
}
##writing out correlation before blank
cort <- cor(asy[-badrow,])
View(cort)
print(paste0('Num of metabolites removed from low values: ', length(lowrow)))
print(paste0('Num of fragmented metabolites removed: ', (length(which(snfrags %in% lowrow)))))
print(paste0('Num of fragmented metabolites removed: ', (length(which(which(pl[lowrow,]$MS.MS.spectrum != ''))))))
print(paste0('Num of fragmented metabolites removed: ', (length(which(pl[lowrow,]$MS.MS.spectrum != ''))))))
print(paste0('Num of fragmented metabolites removed: ', (length(which(pl[lowrow,]$MS.MS.spectrum != '')))))
### 3) Blank filter: if average metabolite value in blank is >= 50% of
### min value in sample -- remove
if (length(blkcol) == 1){
inblank <- make_blank_single(asy)
}else if (length(blkcol) > 1){
inblank <- make_blank_mult(pl, blkcol, blkgrp)
}
##seeing if metabs of interest are removed.
if (length(introws) > 0){
for (i in 1:length(introws)){
if (introws[i] %in% pl[inblank,idcol]){
print(paste0(introws[i], ' was in the blank'))
}
}
}
print(paste0('Num of metabolites in blank: ', length(inblank)))
print(paste0('Num of fragmented metabolites removed: ', length(which(pl[inblank,]$MS.MS.spectrum != ''))))
#print(inblank[which(inblank == telrow)])
if (telrow %in% inblank) inblank <- inblank[-which(inblank == telrow)] ##need to keep internal stndard
badrow <- c(badrow, inblank)
badrow <- unique(badrow)
#print('Correlation after blank filter')
print(paste0('Num of metabolites removed from blank or low row or SN: ', length(badrow)))
print(colnames(asy))
### 4) Normalizing to sample weight
for (i in 1:length(sweights)){
asy[,i] <- asy[,i]/sweights[i]
}
### 5) Normalizing to internal standard, if wanted
if (isnm == 'yes'){
intvals <- asy[telrow,]
for (i in 1:length(intvals)){
asy[,i] <- asy[,i]/intvals[i]
}
}
print('Done with intstd norm')
##now need to add telrow to rows getting removed
badrow <- c(badrow, telrow)
badrow <- sort(badrow)
dim(asy)
length(badrow)
6158-6106
if (length(blkcol) == 1){
asy2 <- asy[-badrow, -ncol(asy)]
} else {
asy2 <- asy[-badrow, 1:(ncol(asy)-length(blkcol))]
}
dim(asy2)
### 6) log transform (if wanted) added 11/17/20
if (lt == 'yes'){
asy2 <- log10(asy2 + 1)
}
### 7) imputing missing values, ignoring blank
if (imp == 'yes'){
mdat <- pl[-badrow,]
gps <- get_groups(asy2)
knnlis <- imp_per_group(asy2, gps, mdat)
mdat2 <- knnlis[[1]]
knnasy <- knnlis[[2]]
print(paste0('Num of metabolites removed from knn, noise or blank: ', length(badrow)))
print(length(badrow))
#badrow <- c(badrow, missrow)
badrow <- unique(badrow)
#print('Correlation after knn imputation')
#print(cor(knnasy))
}else{
knnasy <- asy2
gps <- get_groups(knnasy)
#knnasy <- asy[-badrow,]
mdat2 <- pl[-badrow,]
}
dim(mdat2)
head(mdat2[,1], 20)
ph[which(ph$Alignment.ID == 1346)]
ph[which(ph$Alignment.ID == 1346),]
pl[pl$Alignment.ID == 2910,]
2535 %in% inblank
library(ggplot2)
?facet_wrap

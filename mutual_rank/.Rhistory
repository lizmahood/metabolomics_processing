argg <- c('E:/MS_Data/BrachyMetabolites/canopus/pos_all/sirius_pos_canopus_summary.tsv', 'E:/MS_Data/BrachyMetabolites/canopus/pos_all/sirius_pos_formulas.tsv', 'E:/MS_Data/BrachyMetabolites/canopus/pos_all/conf_score_probs_all_classes.tsv')
parse_id <- function(ids){
new <- unlist(lapply(strsplit(ids, 'scans'), '[[', 2))
return(new)
}
canopus <- read.table(argg[1], sep = '\t', header = T, fill = NA, quote = "")
formula <- read.table(argg[2], sep = '\t', header = T, fill = NA, quote = "")
conf <- read.table(argg[3], sep = '\t', header = T)
conf <- read.table(argg[3], sep = '\t', header = T, fill =NA, quote = "")
head(conf)
canopus$name <- parse_id(canopus$name)
formula$id <- parse_id(formula$id)
head(canopus)
head(formula)
formula$id
table(grepl('scans', formula$id))
which(!(grepl('scans', formula$id)))
formula <- read.table(argg[2], sep = '\t', header = T, fill = NA, quote = "")
formula$id <- parse_id(formula$id)
c_conf <- merge(canopus, conf, by.x = 'name', by.y = 'name')
f_conf <- merge(formula, conf, by.x = 'id', by.y = 'name')
head(c_conf)
head(f_conf)
head(conf)
conf <- read.table(argg[3], sep = '\t', header = T, fill =NA, quote = "")
c_conf <- merge(canopus, conf, by.x = 'name', by.y = 'name')
head(conf)
c_conf <- merge(canopus, conf, by.x = 'name', by.y = 'newnames')
f_conf <- merge(formula, conf, by.x = 'id', by.y = 'newnames')
head(c_conf)
c_conf <- c_conf[which(c_conf$prob >= 0.5),]
f_conf <- f_conf[which(f_fonf$prob >= 0.5),]
f_conf <- f_conf[which(f_conf$prob >= 0.5),]
c_conf$formula <- NULL; c_conf$class.y <- NULL; c_conf$prob <- NULL
f_conf$formula <- NULL; f_conf$class <- NULL; f_conf$prob <- NULL
write.table(c_conf, file = paste0(argg[1], '_filtered.tsv'), sep = '\t', quote = F, row.names = F)
write.table(f_conf, file = paste0(argg[2], '_filtered.tsv'), sep = '\t', quote = F, row.names = F)
argg[2] <- 'E:/MS_Data/BrachyMetabolites/canopus/neg_all/sirius_negative__formulas.tsv'
formula <- read.table(argg[2], sep = '\t', header = T, fill = NA, quote = "")
formula$id <- parse_id(formula$id)
head(formula$id)
ids <- formula$id
print(head(ids))
new <- unlist(lapply(strsplit(ids, 'scans'), '[[', 2))
